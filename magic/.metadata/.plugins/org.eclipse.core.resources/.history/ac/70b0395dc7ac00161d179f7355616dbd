package pack;

public class Ressources extends Cartes {
	
	private String prodType;
	private int prod;
	private int vie;
	private String effet;
	
	private int type = 3;
	
	
	 // (Nom, Cout, Type de production, Nombre produit, Vie, Effet)
	 static Ressources ID_1_1 = new Ressources("Mine de mana", 3, "Mana", 1, 5, "Produit un cristal de mana par tour.");
	 static Ressources ID_1_2 = new Ressources("Mine de mana", 3, "Mana", 1, 5, "Produit un cristal de mana par tour.");
	 static Ressources ID_2_1 = new Ressources("Puits de lumière", 3, "Vie", 2, 3, "Rends deux points de vie à votre héro chaque tour");
	 static Ressources ID_2_2 = new Ressources("Puits de lumière", 3, "Vie", 2, 3, "Rends deux points de vie à votre héro chaque tour");
	 
	public Ressources(String name, int cout, String prodType, int prod, int vie, String effet){
		super(name, cout);
		this.prodType = prodType;
		this.prod = prod;
		this.vie = vie;
		this.effet = effet;
	}
	
	public String toString(){
		String retour;
		
		retour = "========== Ressource ==========";
		retour+= "\n"+super.toString();
		retour+= "\nProduction: "+this.prod+" Mana/ tour";
		retour+= "\nVie: "+this.vie;
		retour+= "\nEffet: "+this.effet;
		retour+= "\n===============================";
				
		return retour;
	}	
	
	@Override
	public void JouerJ1(Joueurs id, int nbre, int cible){
		if(id.getMana() >= ((Ressources) id.getDeckJ1()[nbre]).getCout() && Plateau.getNbreCreatures() < 10 && id.isJoue() == true && ((Ressources) id.getDeckJ1()[nbre]).getEtat() == 2){
        // Verification de l'état général du jeu
			((Ressources) id.getDeckJ1()[nbre]).setEtat(3);//Pose sur le plateau
		
        int crea = Plateau.getNbreCreatures() + 1; //On incrémente le nombre de créatures sur le plateau
		Plateau.setNbreCreatures(crea);

		int mn = id.getMana() - ((Ressources) id.getDeckJ1()[nbre]).getCout(); //On soustrait le cout de la créature pour avoir le mana restant
		id.setMana(mn);
		
		int cart = id.getNombreCartes() - 1; //On soustrait une carte à la main du joueur
		id.setNombreCartes(cart);
		
		System.out.println("\nMAGIC-LOG > PLAYER "+id.getName()+" PLAYS "+((Ressources) id.getDeckJ1()[nbre]).getName() +"(0|"+((Ressources) id.getDeckJ1()[nbre]).getVie()+")");
		System.out.println("MAGIC-LOG > "+id.getName()+" MANA LEFT: "+id.getMana()+"/"+id.getManaMax()+"" );
		System.out.println("MAGIC-LOG > THE BOARD HAVE "+Plateau.getNbreCreatures()+" MINIONS NOW" );
		
		}
	}
	@Override
	public void JouerJ2(Joueurs id, int nbre, int cible){
		if(id.getMana() >= ((Ressources) id.getDeckJ2()[nbre]).getCout() && Plateau.getNbreCreatures() < 10 && id.isJoue() == true && ((Ressources) id.getDeckJ2()[nbre]).getEtat() == 2){
        // Verification de l'état général du jeu
			((Ressources) id.getDeckJ2()[nbre]).setEtat(3);//Pose sur le plateau
		
        int crea = Plateau.getNbreCreatures() + 1; //On incrémente le nombre de créatures sur le plateau
		Plateau.setNbreCreatures(crea);

		int mn = id.getMana() - ((Ressources) id.getDeckJ2()[nbre]).getCout(); //On soustrait le cout de la créature pour avoir le mana restant
		id.setMana(mn);
		
		int cart = id.getNombreCartes() - 1; //On soustrait une carte à la main du joueur
		id.setNombreCartes(cart);
		
		System.out.println("\nMAGIC-LOG > PLAYER "+id.getName()+" PLAYS "+((Ressources) id.getDeckJ2()[nbre]).getName() +"(0|"+((Ressources) id.getDeckJ2()[nbre]).getVie()+")");
		System.out.println("MAGIC-LOG > "+id.getName()+" MANA LEFT: "+id.getMana()+"/"+id.getManaMax()+"" );
		System.out.println("MAGIC-LOG > THE BOARD HAVE "+Plateau.getNbreCreatures()+" MINIONS NOW" );

		}
	}

	
	public void Produit(Joueurs id){
		if(id.isJoue() == true && this.getEtat() == 3 && this.prodType == "Mana"){
		// On verifie que c'est le tour du joueur qui possède la carte et que la carte est sur le plateau
			
			int ma = id.getMana() + this.prod; //Chaque tour, on gagne la production
			id.setMana(ma);
			
			System.out.println("MAGIC-LOG > PLAYER "+id.getName()+" GAINS "+this.getProduction()+" MANA FROM "+this.getName());		
			
		}
		else if(id.isJoue() == true && this.getEtat() == 3 && this.prodType == "Vie" && id.getVie() + this.getProduction() <= 30){
		// On verifie que c'est le tour du joueur qui possède la carte et que la carte est sur le plateau
		// On vérifie aussi qu'on ira pas au delà de 30 points de vie
			
			int ma = id.getVie() + this.prod; //Chaque tour, on gagne la production
			id.setVie(ma);
			
			System.out.println("MAGIC-LOG > PLAYER "+id.getName()+" GAINS "+this.getProduction()+" HEALTH FROM "+this.getName());		
						
		}
	}

	public void Meurt(Joueurs id){
		if(this.vie <= 0) {

			this.setEtat(0); //Supprime la carte du jeu

	        int crea = Plateau.getNbreCreatures() - 1; //On décrémente le nombre de créatures sur le plateau
			Plateau.setNbreCreatures(crea);	
			
			System.out.println("\nMAGIC-LOG > ("+id.getName()+")"+this.getName()+" IS DEAD | REMOVED");
			System.out.println("MAGIC-LOG > THE BOARD HAVE "+Plateau.getNbreCreatures()+" MINIONS NOW" );
		}
	}

	public void FrappeHero(Joueurs id, Joueurs id2){
		System.out.println("Cette carte ne peut pas frapper ...");
		}

	public int getProduction() {
		return prod;
	}

	public void setProduction(int prod) {
		this.prod = prod;
	}

	public int getVie() {
		return vie;
	}

	public void setVie(int vie) {
		this.vie = vie;
	}

	public String getEffet() {
		return effet;
	}

	public void setEffet(String effet) {
		this.effet = effet;
	}

	public int getType() {
		return type;
	}

	public void setType(int type) {
		this.type = type;
	}


	@Override
	public void FrappeJ1(Joueurs id, int nbre, Joueurs id2, int nbre2) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void FrappeJ2(Joueurs id, int nbre, Joueurs id2, int nbre2) {
		// TODO Auto-generated method stub
		
	}

}
